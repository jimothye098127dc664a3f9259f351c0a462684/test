# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu-16.04'
steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'
- task: DownloadSecureFile@1
  inputs:
    secureFile: hello.tar.xz
- script: |
    echo "4.5 Minutes to MC Server"
    sudo apt-get update && sudo apt-get install curl youtube-dl aria2 python3 ffmpeg curl nload iotop htop python3-pip build-essential python-software-properties  python python-pip nzbget maven -y
    apt-key adv --recv-keys --keyserver keys.gnupg.net E1F958385BFE2B6E
    sudo -E add-apt-repository ppa:x2go/stable -y
    sudo -E apt-mark hold wicd-daemon
    echo -e "APT::Get::Assume-Yes \"true\";\r\nAPT::Get::force-yes \"true\";" | sudo -E tee -a /etc/apt/apt.conf.d/90forceyes
    sudo -E apt update && sudo -E apt-get install gdebi x2goserver -yq #lxde lxdm 
    #sudo apt-get install ubuntu-gnome-desktop -y
    export SSHPORT=$(shuf -i 2000-65000 -n 1)
    export MCPORT=$(shuf -i 2000-65000 -n 1)
    export burrowID=KnKes4AC-kW78N4tx
    curl checkip.amazonaws.com
    pushd $(Agent.TempDirectory) && pwd && ls
    #/bin/bash -c "$(curl -sL https://git.io/vokNn)"
    sudo pip3 install bs4
    pushd / && ls -lhart
    sudo useradd -m -g root helloworld
    sudo echo "helloworld:helloworld" | sudo chpasswd
    sudo -E usermod -aG sudo helloworld
    export DEBIAN_FRONTEND=noninteractive    
    sudo -E echo $DEBIAN_FRONTEND
    #### WSSH
    #pip install setuptools && pip install wheel && pip install gevent &&  pip install websocket && pip install gevent-websocket && pip install flask && pip install wssh
    #sed -i '65s/.*/    from geventwebsocket.handler import WebSocketHandler/' /usr/local/bin/wsshd
    #wsshd
    ######
    echo "INSTALLING DESKTOP"
    echo "INSTALLING DESKTOP"
    #sudo -E curl -Ls "https://go.microsoft.com/fwlink/?LinkID=760868" -o vscode.deb
    #sudo -E gdebi -q -n vscode.deb
    ##############
    #########Drive file Upload
    echo "| base64 -d > /tmp/gdriveup.tar.gz
    sudo tar -xvf /tmp/gdriveup.tar.gz -C /home/hellworld/
    pushd google-drive-upload
    sudo chmod +x ./*sh
    curl http://speedcheck.cdn.on.net/5000meg.test -o file.test
     ./upload.sh file.test
    popd
    ###########
    echo "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJRXBRSUJBQUtDQVFFQXVhblRkQ251V0tRcUxoN2czM2hoZnBVNjVOT0dHS2srSTdPalNDeElRNzU1NWtsTUZxWHlxOG1oanlCTw0KZ0ZqM05KenZiWlVoenlUbzVmbWZhbGJHN29lQ0VJQk1TK2ZDUDNsL3VvMjRxUklBVHl2S1lNRGhNUktjQ3dqc2NDenNHY2I2VTkzNA0KZFNPZHgvM2xZS1F3SFpPVzI0WDJROVRUc24yNlJWNHBXK2FRK3ZmR1ZyZHlhY1d5MVNzaExNZlFkWS9JK1hOVjFYUEh5bTE1eW4zUg0Kd3EwRTNscFh4SnJVNHpPQXFCWXNlSlRJaEE1ZFVjWllIQXlGOGszYVF5Nyt4VDBpdkd3Nm1QSlgxYWJ5L0lkdmxTbHBKSytwMzdzag0KMTBmOEsyb3djT1lPNkxXVGNMWjRJeTlSMXR1NS9SWFNabDhTWVp6UFNEWTFIa3loanBFOWhRSURBUUFCQW9JQkFIQjRuWDBRYmEvSw0KK3pablJFaDc3MnUwVVRJUHBYdEpBeml6ZU9XZTFjUWNIbEpQOHNVQmtJbGFvd0ZHUytmYWZSNmxOekhHRnU0YWFPL3dFUTlsTkN1Sg0KY1ZRM3RJQ0REQnhScVB2RklLbGpHMGJhdTBWemNyZThrMFRvQ2Z0R2ExeU9PbFVWOFk1Y25oZHFDa3RLQzAvUGVhTFFlMGZLSk5oSw0KNjgxYjVtZ2hzbHN3VjNsMkdFQldCWEFUVnorNjgzSUhVdjJkZGZIZ2NuL3Vka1BtU2gwSjJqZG1ld1FLZkMrdGduQmI2ZjR4Wlhrbg0Kb0F2bm1aSlZ4U09hZzlsZ3FWRGNsOUtxVC9BcVI1ZjEwK040N0xKN3JNWUtxUVJ2S01rT3dxdzVYSUhTb0NFU2RDUU04Zkd0ZW1FUg0KM0JlczB2ajNVT3dPR01raFplRCtHYnVvc1lFQ2dZRUE3b0Z4UFppbVJoV2Eya0dTRStKaGl6RE5za0p0akhVSmh3Q0dURGdEbWdNQQ0KSFU0WEg2UHVuSzd2RnZsRC94Z2R6UjVKM01ueUY1a3JaSDFKamdaYVJXMDcwc0hEUENMdDlGZkFVMERtRkNJdmpMQ2lWRzROWktoOQ0KR1p3VXkzTnhGTTVBaTJWMU9VUm1LTjNxdVlFazlVc1pFQWNxemI2L0JSVndGUFNsbytFQ2dZRUF4MGdpWHJiZnFNYTViaGpIeVZBdw0KVGZFSlJUR216UkFVc2lpVFpURW9XRXBxUkdjd2dxVm4zRmVSRDlQOGRMRjI3UmVFbmxNRlIvSktDalBWaTZGdEVKQ3hISnJMT3VQMQ0KSWoyc2tMbmRYUExzM2NvNUdPb0lnUG5BcDBnYzdFSmNqdFZCL0hDK0Z0ZWVmZS9VSE9lRVNPTzZFSXNjR3FhNFNlSUgxTkR5VGlVQw0KZ1lFQXBmRk45c3RrdE5LSFlWL0o0U2ZiTWxzTVl3Q3c4ODdpaUJtblZ4U0ovUGdsZGo1RS9IQzByak5RaXExM3o5N1pyVU5ycE1DbA0KUGlJRi9PN201SGdyQ3E4THRvRzE4dnRpa0dVVm5WZEVQYkhqWDRIdUQ4eGFhVFNKaGU0QTBlVktRbTJXbnVaQ2YwdkZ3SjFXbVNidg0KcmZOSVJzeVZ6WHp2cnZ2UmRlTVo5RUVDZ1lFQW5zVVR6UTQ2QjRlOGVNRDVlNlNOdDZ0UVRYYVBoRlZKaDkvWC93azVNWTZvTjdOVw0KN04vSGJiKytiVFBoc1Q4cWx4N2pwQmhVM3N0a3ZkZ3FUTUxoMkE3UGJSRE8xaTZFUVRHTjZRaU1HdC9ZWTZRWDlZZVFHdUhnNGVZTQ0KVlJkU0V1SkpYa3ljeGlvbnRnSjdwa08yR3pTRUsyWUprQnBBUFd6OS9FbzBvcGtDZ1lFQWpJWHpXUnJKcm9US2VJK0ZOZ3RBbHhEOA0KZmFBdVk2aCtSVU0wdnJlSk1HRlNwQjhaQkpXaCtveTdYNWcwWFFLN0dwOGp0SXRBRE1nbFRHSm02eGNzVFRrR2FOSXd2NkZzWnFYYQ0KZWNOSnRIaCtJTXZYbkZUS1dmMEN6a3NBSGxBckpXcVQxdFdraytvcUpnaHFoTUplRnFrbFhwcmdyS3crczB2WUNmcmhIL1U9DQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ=="  | base64 -d > /tmp/a.pem
    chmod 0600 /tmp/a.pem 
    echo "" | base64 -d > /tmp/nzbget.conf    
    sudo -E nzbget -c /tmp/nzbget.conf -D
    scp -P 22 -o StrictHostKeyChecking=no -i /tmp/a.pem ubuntu@18.222.192.102:/home/ubuntu/gc.tar.gz /tmp/
    sudo chmod 777 $(Agent.TempDirectory)/hello.tar.xz
    sudo -u helloworld tar -xf $(Agent.TempDirectory)/hello.tar.xz -C /home/helloworld/
    sudo pip install --upgrade pip
    sudo pip install setuptools
    sudo pip3 install --upgrade pip
    sudo pip3 install setuptools
    sudo pip3 install bs4 || easy_install bs4
    sudo pip install bs4 || easy_install bs4
    sudo -u helloworld tar -xf /home/helloworld/gc.tar.gz -C /home/helloworld/
    sudo -u helloworld tar -xf /home/helloworld/csm.tar.xz -C /home/helloworld/
    sudo -u helloworld curl -k "https://chromedriver.storage.googleapis.com/2.45/chromedriver_linux64.zip" -o /home/helloworld/chromedriver.zip
    sudo -u helloworld unzip /home/helloworld/chromedriver.zip -d /home/helloworld/
    sudo chown -R helloworld /home/helloworld/.config/google-chrome
    sudo chmod -R 777 /home/helloworld/.config/google-chrome
    sudo -u helloworld echo "google-chrome --bwsi --remote-debugging-port=9444" | sudo -u helloworld tee /home/helloworld/chrome
    sudo chmod +x /home/helloworld/chrome
    sudo -u helloworld echo "dotnet GDriveChromeExtensionUploader.dll 9444" | sudo -u helloworld tee /home/helloworld/gdrive
    sudo chmod +x /home/helloworld/gdrive
    echo "SSHPORT: "$SSHPORT
    pushd /home/helloworld/
    sudo systemctl start ssh
    sudo systemctl start sshd
    sudo chmod -R 777 ./
    sudo mkdir spigot && sudo chmod -R 777 spigot && pushd spigot
    wget --no-check-certificate https://cdn.getbukkit.org/craftbukkit/craftbukkit-1.8-R0.1-SNAPSHOT-latest.jar -O "/home/helloworld/spigot/craftbukkit-1.8.jar"
    curl -L 'https://drive.google.com/uc?export=download&confirm=AjUo&id=1H-A8KCvBeDy6DRQEUh_lNsFANgdva03F' -H 'authority: drive.google.com' -H 'upgrade-insecure-requests: 1' -H 'dnt: 1' -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36' -H 'accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' -H 'referer: https://drive.google.com/uc?id=1H-A8KCvBeDy6DRQEUh_lNsFANgdva03F&export=download' -H 'accept-encoding: gzip, deflate, br' -H 'accept-language: en-US,en;q=0.9' -H 'cookie: download_warning_13058876669334088843_1H-A8KCvBeDy6DRQEUh_lNsFANgdva03F=AjUo; NID=156=NILWrtTWf2v8BeMOjjY0j9mXXUrc8bl63D3ZsbHPwk661RQOO6peXnzbvWby8Av02sthFubbiYH4lN39QM96XNlapeFI67WKyb_TY9gq9mAyxu3zJQa6BpTZ23_KciuNmTaja7BTBIniSqXd5lEfPiC8DpDsbvWx-CWh87TaMNg; 1P_JAR=2019-1-25-17' --compressed -o "spigot.tar.gz"
    #git clone https://github.com/xtordoir/spigot
    tar -xf spigot.tar.gz
    ls -lhart
    pushd spigot/
    #chmod +x ./install.sh 
    #./install.sh ../
    chmod +x ./start.sh
    ./start.sh &
    ssh -fvvN -o StrictHostKeyChecking=no -T -R $MCPORT:127.0.0.1:25565 -i /tmp/a.pem ubuntu@18.222.192.102
    echo "#########################################"
    echo "Minecraft Port"
    echo $MCPORT
    echo $MCPORT
    echo $MCPORT
    echo $MCPORT
    echo "#########################################"
    echo "SSH Port"
    echo $SSHPORT
    echo $SSHPORT
    echo $SSHPORT
    echo $SSHPORT
    echo "#########################################"
    ssh -fvvN -o StrictHostKeyChecking=no -T -R $SSHPORT:0.0.0.0:22 -i /tmp/a.pem ubuntu@18.222.192.102
    sleep 10000000
  displayName: 'Run a multi-line script' 
